initSidebarItems({"fn":[["extension_to_mime","Returns the mime type of a file based on its extension, or `application/octet-stream` if the extension is unknown."],["log","Adds a log entry to the given writer for each request."],["log_custom","Calls custom logging functions after processing a request."],["match_assets","Searches inside `path` for a file that matches the given request. If a file is found, returns a `Response` that would serve this file if returned. If no file is found, a 404 response is returned instead."],["start_server","Starts a server and uses the given requests handler."],["start_server_with_pool","Identical to `start_server` but uses a `ThreadPool` of the given size."]],"macro":[["accept","Dispatches between blocks depending on the value of the `Accept` header."],["assert_or_400","This macro assumes that the current function returns a `Response`. If the condition you pass to the macro is false, then a 400 response is returned."],["find_route","Evaluates each parameter until one of them evaluates to something else than a 404 error code."],["post_input","Parse input from HTML forms. See the `post` module for general documentation."],["router","Equivalent to a `match` expression but for routes."],["try_or_400","This macro assumes that the current function returns a `Response` and takes a `Result`. If the expression you pass to the macro is an error, then a 400 response is returned."],["try_or_404","This macro assumes that the current function returns a `Response` and takes a `Result`. If the expression you pass to the macro is an error, then a 404 response is returned."]],"mod":[["cgi","Allows you to let an external process handle the request through CGI."],["content_encoding",""],["input","Analyze the request's headers and body."],["proxy","Dispatch a request to another HTTP server."],["session","Sessions handling."],["websocket","Support for websockets."]],"struct":[["HeadersIter","Iterator to the list of headers in a request."],["Request","Represents a request that your handler must answer to."],["RequestBody","Gives access to the body of a request."],["Response","Contains a prototype of a response."],["ResponseBody","An opaque type that represents the body of a response."],["Server","A listening server."]],"trait":[["ReadWrite","Dummy trait that regroups the `Read` and `Write` traits."],["Upgrade","Trait for objects that can take ownership of a raw connection to the client data."]]});